name: Pucar-Install Workflow Dev
# Workflow branch creating cluster against the input.yaml file
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  id-token: write
  contents: write
jobs:
  check-changed-files:
    runs-on: ubuntu-latest
    outputs:
      deploy-as-code-changed: ${{ steps.check_files.outputs.deploy-as-code-changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for changes in deploy-as-code
        id: check_files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            deploy-as-code/**

  Input_validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        run: echo "Github Actions Workflow has started"
      - name: Displaying the input parameters provided
        run: cat input.yaml
        working-directory: infra-as-code/terraform/azure-pucar
      - name: Convert YAML to ENV
        uses: dcarbone/yaml-to-env-action@main
        with:
          yaml-file: infra-as-code/terraform/azure-pucar/input.yaml
          debug: true # Optional: set to true to output some debug information
      # Now, use the env vars in subsequent steps
      - name: Display environment variables
        run: |
          echo "environment: $environment"
      - name: Change working directory
        run: echo "This command is run in the current directory"
        working-directory: infra-as-code/terraform/azure-pucar/remote-state
      - name: Updating different files based on parameters provided in input.yaml
        run: go run init.go
        working-directory: infra-as-code/terraform/scripts
      - name: Archive infra-as-code folder
        run: tar -czf infra-as-code.tar.gz infra-as-code/
      - name: Archive deploy-as-code folder
        run: tar -czf deploy-as-code.tar.gz deploy-as-code/
      - name: Upload infra-as-code folder as artifact
        uses: actions/upload-artifact@v2
        with:
          name: infra-as-code-artifact
          path: infra-as-code.tar.gz
      - name: Upload deploy-as-code folder as artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy-as-code-artifact
          path: deploy-as-code.tar.gz

  Terraform_Infra_Creation:
    needs: Input_validation
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true"
      ARM_CLIENT_ID:  ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET:  ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID:  ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download infra-as-code folder from artifacts
        uses: actions/download-artifact@v2
        with:
          name: infra-as-code-artifact
          path: .
      - name: Download deploy-as-code folder from artifacts
        uses: actions/download-artifact@v2
        with:
          name: deploy-as-code-artifact
          path: .
      - name: Extract infra-as-code folder
        run: tar -xzf infra-as-code.tar.gz
      - name: Extract deploy-as-code folder
        run: tar -xzf deploy-as-code.tar.gz
      - name: Convert YAML to ENV
        uses: dcarbone/yaml-to-env-action@main
        with:
          yaml-file: infra-as-code/terraform/azure-pucar/input.yaml
          debug: true # Optional: set to true to output some debug information
      #      # Now, use the env vars in subsequent steps
      #      - name: Install dependencies
      #        run: sudo apt-get install -y jq
      #      - name: Convert YAML to JSON
      #        run: |
      #          cat deploy-as-code/charts/environments/env-secrets.yaml | yq e -j - > secrets.json
      #      - name: Extract dbPassword
      #        id: extract
      #        run: |
      #          db_password=$(jq -r '.secrets.db.password' secrets.json)
      #          echo "db_password=$db_password" >> $GITHUB_ENV
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      #      - name: Terraform Init - remotestate
      #        id: init
      #        run: terraform init
      #        working-directory: infra-as-code/terraform/azure-pucar/remote-state
      #      - name: Terraform Validate - remotestate
      #        id: validate
      #        run: terraform validate -no-color
      #        working-directory: infra-as-code/terraform/azure-pucar/remote-state
      #      - name: Terraform Plan - remotestate
      #        id: plan
      #        run: terraform plan -no-color -input=false
      #        working-directory: infra-as-code/terraform/azure-pucar/remote-state
      #      - name: Terraform Apply - remotestate
      #        id: apply
      #        run: terraform apply -no-color -input=false -auto-approve
      #        continue-on-error: true
      #        working-directory: infra-as-code/terraform/azure-pucar/remote-state
      - name: Terraform init - Infra creation
        id: init-Infra
        run: terraform init
        working-directory: infra-as-code/terraform/azure-pucar
      - name: Terraform Validate - Infra creation
        id: validate-Infra
        run: terraform validate -no-color
        working-directory: infra-as-code/terraform/azure-pucar
      - name: Terraform Plan - Infra creation
        id: plan-Infra
        run: terraform plan -no-color -input=false -var-file="tfvars/dev.tfvars" -var "db_password=${{ secrets.TF_VAR_db_password }}" -var "db_username=${{ env.DB_USERNAME }}" -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"
        env:
          DB_USERNAME: ${{ env.DB_USERNAME }}
        working-directory: infra-as-code/terraform/azure-pucar
      # - name: Terraform Apply - Infra creation
      #   id: apply-Infra
      #   run: terraform apply -no-color -input=false -auto-approve -var-file="tfvars/dev.tfvars" -var "db_password=${{ secrets.TF_VAR_db_password }}" -var "db_username=${{ env.DB_USERNAME }}" -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"
      #   env:
      #     DB_USERNAME: ${{ env.DB_USERNAME }}
      #   working-directory: infra-as-code/terraform/azure-pucar
      - name: Generate kubeconfig
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $ENVIRONMENT
          cat ~/.kube/config > kubeconfig
      - name: Kubectl setup
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        id: install
      - name: Verify kubectl configuration
        run: kubectl config view
      - name: Verify kubectl get nodes
        run: |
          kubectl get nodes
      # - name: Updating the terraform output data in environment.yaml files for deployment
      #   run: terraform output -json | go run ../scripts/envYAMLUpdater.go
      #   working-directory: infra-as-code/terraform/azure-pucar
      - name: Archive infra-as-code folder
        run: tar -czf infra-as-code.tar.gz infra-as-code/
      - name: Archive deploy-as-code folder
        run: tar -czf deploy-as-code.tar.gz deploy-as-code/
      - name: Upload infra-as-code folder as artifact
        uses: actions/upload-artifact@v2
        with:
          name: infra-as-code-artifact
          path: infra-as-code.tar.gz
      - name: Upload deploy-as-code folder as artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy-as-code-artifact
          path: deploy-as-code.tar.gz

  DIGIT-deployment:
    if: ${{ github.event_name == 'push' }}
    needs: Terraform_Infra_Creation
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true"
      ARM_CLIENT_ID:  ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET:  ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID:  ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download infra-as-code folder from artifacts
        uses: actions/download-artifact@v2
        with:
          name: infra-as-code-artifact
          path: .
      - name: Download deploy-as-code folder from artifacts
        uses: actions/download-artifact@v2
        with:
          name: deploy-as-code-artifact
          path: .
      - name: Extract infra-as-code folder
        run: tar -xzf infra-as-code.tar.gz
      - name: Extract deploy-as-code folder
        run: tar -xzf deploy-as-code.tar.gz
      - name: Convert YAML to ENV
        uses: dcarbone/yaml-to-env-action@main
        with:
          yaml-file: infra-as-code/terraform/azure-pucar/input.yaml
          debug: true # Optional: set to true to output some debug information
      # Now, use the env vars in subsequent steps
      #     - name: Install dependencies
      #       run: sudo apt-get install -y jq
      #     - name: Convert YAML to JSON
      #       run: |
      #         cat deploy-as-code/charts/environments/env-secrets.yaml | yq e -j - > secrets.json
      #     - name: Extract flywayPassword
      #       id: extract
      #       run: |
      #         db_password=${{ secrets.TF_VAR_db_password }}
      #         db_password=$(jq -r '.secrets.db.password' secrets.json)
      #         echo "db_password=$db_password" >> $GITHUB_ENV
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Generate kubeconfig
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $ENVIRONMENT
          cat ~/.kube/config > kubeconfig
      - name: Kubectl setup
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        id: install
      - name: Creating namespace
        run: kubectl create namespace egov
        continue-on-error: true
      - name: Verify kubectl get nodes
        run: |
          kubectl get nodes
      - name: Install sops
        run: |
          sudo apt update
          sudo apt install -y age
          mkdir -p $HOME/.config/sops/age/
          echo # public key: ${{ secrets.PUBLIC_AGE_KEY }} > $HOME/.config/sops/age/keys.txt
          echo ${{ secrets.PRIVATE_AGE_KEY }} >> $HOME/.config/sops/age/keys.txt
          wget https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux
          chmod +x sops-v3.7.1.linux
          sudo mv sops-v3.7.1.linux /usr/local/bin/sops
      - name: sops decryption
        run: |
          sudo sops --decrypt --age ${{ secrets.PUBLIC_AGE_KEY }} env-secrets.yaml > env-secrets1.yaml
          cp env-secrets1.yaml env-secrets.yaml
        working-directory: deploy-as-code/charts/environments

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'latest' # Specify the version of Helm
      - name: Install Helmfile
        uses: helmfile/helmfile-action@v1.9.0
        with:
          helmfile-version: 'v0.150.0'
          helm-plugins: >
            https://github.com/databus23/helm-diff
     # - name: digit deployment
     #   run: helmfile -f digit-helmfile.yaml apply --include-needs=true
     #   working-directory: deploy-as-code
     - name: Delete Artifact
       uses: GeekyEggo/delete-artifact@v5.0.0
       with: 
          name: deploy-as-code-artifact,
                infra-as-code-artifact
          token: ${{ secrets.GHUB_TOKEN }}

  delete-artifacts:
    needs: DIGIT-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GHUB_TOKEN }}
          expire-in: 0 # Setting this to 0 will delete all artifacts
#  terraform_infra_destruction:
#    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.destroyCommand == 'destroy' }}
#    runs-on: ubuntu-latest
#    env:
#      TF_IN_AUTOMATION: "true"
#      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Convert YAML to ENV
#        uses: dcarbone/yaml-to-env-action@main
#        with:
#          yaml-file: infra-as-code/terraform/azure-pucar/input.yaml
#          debug: true # Optional: set to true to output some debug information
#      - name: Display environment variables
#        run: |
#          echo "environment: $environment"
#      - name: Change working directory
#        run: echo "This command is run in the current directory"
#        working-directory: infra-as-code/terraform/azure-pucar/remote-state
#      - name: Updating different files based on parameters provided in input.yaml
#        run: go run init.go
#        working-directory: infra-as-code/terraform/scripts
##      - name: Install AWS IAM Authenticator
##        run: |
##          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
##          chmod +x ./aws-iam-authenticator
##          sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
##          aws-iam-authenticator version
#      - name: Generate kubeconfig
#        run: |
#          az aks get-credentials --resource-group $RESOURCE_GROUP --name $ENVIRONMENT
#          cat ~/.kube/config > kubeconfig
#        continue-on-error: true
##      - name: Deleting Loadbalancer
##        run: kubectl delete svc ingress-nginx-controller -n backbone
##        continue-on-error: true
#      - name: Terraform Init - remotestate
#        run: terraform init
#        working-directory: infra-as-code/terraform/azure-pucar/remote-state
#      - name: Terraform Validate - remotestate
#        run: terraform validate -no-color
#        working-directory: infra-as-code/terraform/azure-pucar/remote-state
#      - name: Terraform Init - Infra destruction
#        run: terraform init
#        working-directory: infra-as-code/terraform/azure-pucar
#      - name: Terraform Validate - Infra destruction
#        run: terraform validate -no-color
#        working-directory: infra-as-code/terraform/azure-pucar
#      - name: Terraform Plan - Infra destruction
#        run: terraform plan -destroy -no-color -input=false -var db_password=$db_password
#        working-directory: infra-as-code/terraform/azure-pucar
#      - name: Terraform Destroy - Infra destruction
#        run: terraform destroy -no-color -auto-approve -var db_password=$db_password
#        working-directory: infra-as-code/terraform/azure-pucar
